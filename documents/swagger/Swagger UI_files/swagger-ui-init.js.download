
window.onload = function() {
  // Build a system
  let url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  let options = {
  "swaggerDoc": {
    "openapi": "3.0.0",
    "paths": {
      "/auth/signup": {
        "post": {
          "operationId": "AuthController_signup",
          "summary": "Sign up user",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupDto"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Sign up success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignupSuccessResponseDto"
                  }
                }
              }
            },
            "409": {
              "description": "User already exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignupUserAlreadyExistResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/auth/signin": {
        "post": {
          "operationId": "AuthController_signin",
          "summary": "Sign in user",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Sign in success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SigninSuccessResponseDto"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SigninUnauthorizedResponseDto"
                  }
                }
              }
            },
            "403": {
              "description": "Unverified user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SigninUserUnverifiedResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/auth/verify": {
        "post": {
          "operationId": "AuthController_verificationOtp",
          "summary": "Verify OTP",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP verification success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VerificationSuccessResponseDto"
                  }
                }
              }
            },
            "401": {
              "description": "OTP verification failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VerificationErrorResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/auth/resend": {
        "post": {
          "operationId": "AuthController_resend",
          "summary": "Resend OTP email",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP email sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResendSuccessResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "OTP email sending failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResendErrorResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/auth/forget_password": {
        "post": {
          "operationId": "AuthController_forgetPassword",
          "summary": "Forget password OTP email send",
          "description": "\n      Password recovery steps:\n      \n      1. Call the Forget Password API to sent OTP via email({baseUrl}/auth/forget_password).\n      2. Verify the user's identity by entering the OTP received via email({baseUrl}/auth/verify).\n      3. Call the Change Password API to reset the password, providing the newPassword field in request body({baseUrl}/auth/change_password).\n    ",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgetPasswordDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP email sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ForgetPasswordSuccessResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "OTP email sending failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ForgetPasswordErrorResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/auth/change_password": {
        "post": {
          "operationId": "AuthController_ChangePassword",
          "summary": "Change user password",
          "description": "\n      1) For forget password only newPassword is required \n      2) For change password oldPassword & newPassword both fields are required\n    ",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password changed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChangePasswordSuccessResponseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Failed to change password",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChangePasswordErrorResponseDto"
                  }
                }
              }
            },
            "403": {
              "description": "Unverified user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChangePasswordUnverifiedResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "Auth"
          ]
        }
      },
      "/user/me": {
        "get": {
          "operationId": "UserController_me",
          "summary": "Get user data",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Get user data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MeSuccessResponseDto"
                  }
                }
              }
            }
          },
          "tags": [
            "User"
          ]
        }
      }
    },
    "info": {
      "title": "Authentication Boilerplate",
      "description": "",
      "version": "1.0",
      "contact": {}
    },
    "tags": [
      {
        "name": "",
        "description": ""
      }
    ],
    "servers": [],
    "components": {
      "schemas": {
        "SignupDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "The email of the user"
            },
            "password": {
              "type": "string",
              "example": "password",
              "description": "The password for the account"
            },
            "firstName": {
              "type": "string",
              "example": "John",
              "description": "The first name of the user"
            },
            "lastName": {
              "type": "string",
              "example": "Doe",
              "description": "The last name of the user"
            }
          },
          "required": [
            "email",
            "password"
          ]
        },
        "SignupResponseDataDto": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User ID",
              "example": 19
            },
            "email": {
              "type": "string",
              "description": "Email address of the user",
              "example": "david@gmail.com"
            },
            "firstName": {
              "type": "string",
              "description": "First name of the user",
              "example": "david"
            },
            "lastName": {
              "type": "string",
              "description": "Last name of the user",
              "example": "beckham"
            }
          },
          "required": [
            "id",
            "email",
            "firstName",
            "lastName"
          ]
        },
        "SignupSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the signup was successful",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the signup process",
              "example": "Signup successful"
            },
            "data": {
              "description": "Data of the signed-up user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SignupResponseDataDto"
                }
              ]
            }
          },
          "required": [
            "success",
            "message",
            "data"
          ]
        },
        "SignupUserAlreadyExistResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the operation was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating the reason for failure",
              "example": "User already exists"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "SigninDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "The email of the user"
            },
            "password": {
              "type": "string",
              "example": "password",
              "description": "The password for the account"
            }
          },
          "required": [
            "email",
            "password"
          ]
        },
        "SigninUserData": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User ID",
              "example": 1
            },
            "email": {
              "type": "string",
              "description": "User email",
              "example": "user@example.com"
            },
            "firstName": {
              "type": "string",
              "description": "User first name",
              "example": "John"
            },
            "lastName": {
              "type": "string",
              "description": "User last name",
              "example": "Doe"
            }
          },
          "required": [
            "id",
            "email",
            "firstName",
            "lastName"
          ]
        },
        "SigninSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the signin was successful",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the signin process",
              "example": "Signin successful"
            },
            "data": {
              "description": "Data of the signed-in user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SigninUserData"
                }
              ]
            },
            "token": {
              "type": "string",
              "description": "JWT token for authentication",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          },
          "required": [
            "success",
            "message",
            "data",
            "token"
          ]
        },
        "SigninUnauthorizedResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the signin was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating unauthorized access",
              "example": "Unauthorized"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "SigninUserUnverifiedResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the signin was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating Unverified user",
              "example": "Verify your user"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "VerificationDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "The email of the user"
            },
            "otp": {
              "type": "string",
              "example": "123456",
              "description": "A six-digit OTP (One-Time Password)"
            }
          },
          "required": [
            "email",
            "otp"
          ]
        },
        "VerificationUserData": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User ID",
              "example": 2
            },
            "email": {
              "type": "string",
              "description": "User email",
              "example": "user@example.com"
            },
            "firstName": {
              "type": "string",
              "description": "User first name",
              "example": "user"
            },
            "lastName": {
              "type": "string",
              "description": "User last name",
              "example": "user"
            }
          },
          "required": [
            "id",
            "email",
            "firstName",
            "lastName"
          ]
        },
        "VerificationSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP verification was successful",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the OTP verification process",
              "example": "OTP authorised"
            },
            "token": {
              "type": "string",
              "description": "JWT token for authentication",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            },
            "data": {
              "description": "Data of the verified user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationUserData"
                }
              ]
            }
          },
          "required": [
            "success",
            "message",
            "token",
            "data"
          ]
        },
        "VerificationErrorResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP verification was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating the reason for OTP verification failure",
              "example": "OTP verification failed"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ResendDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "The email of the user"
            }
          },
          "required": [
            "email"
          ]
        },
        "ResendSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP email was sent successfully",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the OTP email sending process",
              "example": "OTP email send"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ResendErrorResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP email sending failed",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating the reason for OTP email sending failure",
              "example": "OTP email send fail"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ForgetPasswordDto": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "user@example.com",
              "description": "The email of the user"
            }
          },
          "required": [
            "email"
          ]
        },
        "ForgetPasswordSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP email was sent successfully",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the OTP email sending process",
              "example": "OTP email send"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ForgetPasswordErrorResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the OTP email sending failed",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating the reason for OTP email sending failure",
              "example": "OTP email send fail"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ChangePasswordDto": {
          "type": "object",
          "properties": {
            "oldPassword": {
              "type": "string",
              "example": "oldPassword123",
              "description": "The old password (if changing)"
            },
            "newPassword": {
              "type": "string",
              "example": "newPassword123",
              "description": "The new password"
            }
          },
          "required": [
            "oldPassword",
            "newPassword"
          ]
        },
        "ChangePasswordSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the password change was successful",
              "example": true
            },
            "message": {
              "type": "string",
              "description": "Message indicating the result of the password change",
              "example": "Your password has been updated"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ChangePasswordErrorResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the password change was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Error message indicating the reason for the password change failure",
              "example": "Failed to change password"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "ChangePasswordUnverifiedResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the signin was unsuccessful",
              "example": false
            },
            "message": {
              "type": "string",
              "description": "Message indicating Unverified user",
              "example": "Verify your user"
            }
          },
          "required": [
            "success",
            "message"
          ]
        },
        "MeUserData": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "description": "User ID",
              "example": 1
            },
            "email": {
              "type": "string",
              "description": "User email",
              "example": "user@gmail.com"
            },
            "firstName": {
              "type": "string",
              "description": "User first name",
              "example": "user"
            },
            "lastName": {
              "type": "string",
              "description": "User last name",
              "example": "user"
            }
          },
          "required": [
            "id",
            "email",
            "firstName",
            "lastName"
          ]
        },
        "MeSuccessResponseDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "description": "Indicates if the request was successful",
              "example": true
            },
            "data": {
              "description": "Data of the user",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MeUserData"
                }
              ]
            }
          },
          "required": [
            "success",
            "data"
          ]
        }
      }
    }
  },
  "customOptions": {}
};
  url = options.swaggerUrl || url
  let urls = options.swaggerUrls
  let customOptions = options.customOptions
  let spec1 = options.swaggerDoc
  let swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (let attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  let ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.initOAuth) {
    ui.initOAuth(customOptions.initOAuth)
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }
  
  window.ui = ui
}
